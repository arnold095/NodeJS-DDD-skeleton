version: "3.9"

networks:
  rabbitmq-prometheus:
  node_ddd_skeleton:
  elastic:
volumes:
  rabbitmq-prometheus_prometheus:
  rabbitmq-prometheus_grafana:
  esdata:
    driver: local
  mongo_data:

services:
  node_ddd_skeleton:
    build: .
    restart: unless-stopped
    networks:
      - "node_ddd_skeleton"
    ports:
      - "3000:3000"
    volumes:
      - ./package.json:/code/package.json
      - ./src:/code/src
    env_file:
      - ./dev.env
    command: bash -c "npm i && npm run start:dev"
    depends_on:
      - redis_ddd_skeleton
      - rabbitmq_ddd_skeleton
  node_ddd_authentication:
    build: .
    restart: unless-stopped
    networks:
      - "node_ddd_skeleton"
    ports:
      - "3001:3001"
    volumes:
      - ./package.json:/code/package.json
      - ./src:/code/src
    env_file:
      - ./dev.env
    command: bash -c "npm i && npm run auth:dev"
    depends_on:
      - redis_ddd_skeleton
      - rabbitmq_ddd_skeleton
  notifications_service:
    container_name: notifications_service
    build: .
    restart: unless-stopped
    networks:
      - "node_ddd_skeleton"
    ports:
      - "3002:3002"
    volumes:
      - ./package.json:/code/package.json
      - ./src:/code/src
    env_file:
      - ./dev.env
    command: bash -c "npm i && npm run consumer:start -- queue:_send_welcome_dummy_mail_on_dummy_created"
    depends_on:
      - redis_ddd_skeleton
      - rabbitmq_ddd_skeleton
  redis_ddd_skeleton:
    image: redis:6.0.10-alpine
    container_name: redis_ddd_skeleton
    networks:
      - "node_ddd_skeleton"
    logging:
      driver: none
    ports:
      - 6379:6379
  mariadb_ddd_skeleton:
    image: mariadb:10.5
    logging:
      driver: none
    container_name: mariadb_ddd_skeleton
    restart: unless-stopped
    ports:
      - '3307:3306'
    networks:
      - "node_ddd_skeleton"
    environment:
      MYSQL_DATABASE: node_ddd_skeleton
      MYSQL_USER: root
      MYSQL_PASSWORD: 123qwe
      MYSQL_ROOT_PASSWORD: 123qwe
  mongodb:
    container_name: mongodb_ddd_skeleton
    image: library/mongo:4.4.4
    volumes:
      - mongo_data:/data/db
    networks:
      - "node_ddd_skeleton"
    ports:
      - 27017:27017
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
  rabbitmq_ddd_skeleton:
    container_name: rabbitmq_ddd_skeleton
    image: 'rabbitmq:3.8.9-management'
    networks:
      - "node_ddd_skeleton"
      - "rabbitmq-prometheus"
    restart: unless-stopped
    ports:
      - 5630:5672
      - 8090:15672
      - 15693:15692
    cap_add:
      - ALL
    environment:
      - RABBITMQ_DEFAULT_USER=ddd_skeleton
      - RABBITMQ_DEFAULT_PASS=ddd_sk3l3t0n
      - RABBITMQ_ERLANG_COOKIE=rabbitmq-prometheus
  grafana_ddd_skeleton:
    container_name: grafana
    image: grafana/grafana:7.3.2
    ports:
      - 4000:3000
    networks:
      - "rabbitmq-prometheus"
    volumes:
      - rabbitmq-prometheus_grafana:/var/lib/grafana
      - ./docker/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/rabbitmq.yaml
      - ./docker/grafana/datasources.yml:/etc/grafana/provisioning/datasources/prometheus.yaml
      - ./docker/grafana/dashboards:/dashboards
    environment:
      GF_INSTALL_PLUGINS: "flant-statusmap-panel,grafana-piechart-panel"
  prometheus_ddd_skeleton:
    # https://hub.docker.com/r/prom/prometheus/tags
    container_name: prometheus
    image: prom/prometheus:v2.22.1
    networks:
      - "rabbitmq-prometheus"
    ports:
      - "9090:9090"
    volumes:
      - rabbitmq-prometheus_prometheus:/prometheus
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
  node-exporter_ddd_skeleton:
    container_name: node-exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100
    # https://hub.docker.com/r/prom/node-exporter/tags
    image: prom/node-exporter:v1.0.1
    networks:
      - "rabbitmq-prometheus"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
  apm-server_ddd_skeleton:
    container_name: apm-server
    image: docker.elastic.co/apm/apm-server:7.11.1
    depends_on:
      elasticsearch_ddd_skeleton:
        condition: service_healthy
      kibana_ddd_skeleton:
        condition: service_healthy
    cap_add: [ "CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID" ]
    cap_drop: [ "ALL" ]
    ports:
      - 8200:8200
    networks:
      - elastic
      - node_ddd_skeleton
    command: >
      apm-server -e
        -E apm-server.rum.enabled=true
        -E setup.kibana.host=kibana:5601
        -E setup.template.settings.index.number_of_replicas=0
        -E apm-server.kibana.enabled=true
        -E apm-server.kibana.host=kibana:5601
        -E output.elasticsearch.hosts=["elasticsearch:9200"]
    healthcheck:
      interval: 10s
      retries: 12
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/

  elasticsearch_ddd_skeleton:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.11.1
    environment:
      - bootstrap.memory_lock=true
      - cluster.name=docker-cluster
      - cluster.routing.allocation.disk.threshold_enabled=false
      - discovery.type=single-node
      - ES_JAVA_OPTS=-XX:UseAVX=2 -Xms1g -Xmx1g
    ulimits:
      memlock:
        hard: -1
        soft: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - elastic
      - node_ddd_skeleton
    healthcheck:
      interval: 20s
      retries: 10
      test: curl -s http://localhost:9200/_cluster/health | grep -vq '"status":"red"'
  kibana_ddd_skeleton:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.11.1
    depends_on:
      elasticsearch_ddd_skeleton:
        condition: service_healthy
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - 5601:5601
    networks:
      - elastic
      - node_ddd_skeleton
    healthcheck:
      interval: 10s
      retries: 20
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:5601/api/status
